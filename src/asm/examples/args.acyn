// Example program dealing with command line arguments
$NL = '\n'

main:
    mov r1 sp
    add r1 16       // last command line argument
    sal r0 3        // multiply number of command line arguments by 8
    add r0 r1       // compute start of command line arguments

L1:
    cmp r0 r1       // is r0 == r1
    jmpz exit       // if so jump to end of loop
    push __stdout   // first argument to built-in write, the file descriptor
    rmem r2 [r0]    // convert VM memory address to system memory address
    push r2         // add actual string memory address as second argument to write

    /* get the length of the string into 22 */
    push [r0]       // push address of string into stack as argument for subroutine strlen
    push 1          // Parsing 1 argument to subroutine
    call strlen     // Call the subroutine
    popn 1          // discard the number of returned args
    pop r2          // get the return length

    push r2         // Push length of string as third argument of builtin write
    push 3          // We are passing 3 arguments to builtin write
    ncall __write   // call the builtin write syscall to write current command line to stdout
    popn 2          // Don't care about arguments returned by the call
    putc.b [NL]     // Write a newline charcter to stdout
    sub r0 8        // advance to the next command line argument
    jmp L1          // jump to loop check

/**
 * Computes the size of the string
 */
strlen:
    mov r2 [sp, argv]      // argv is a built-in variable pointing to start of passed arguments on stack
    mov r3 r2              // keep r3 for later reference
L2:
    cmp.b [r2] '\0'       // check if terminating character
    jmpz E2               // jump to loop epilogue if r2 has '\0'
    inc r2                // increment our loop iterator
    jmp L2                // jump to loop condition
E2:
    sub r2 r3             // compute the size of the string
    push r2               // push computed size to return to caller
    ret 1                 // we are returning only 1 argument on the stack

exit:
    halt            // exit the virtual machine
